BUILD0 := <%= $0 %> --root=<%= @workspace.root %>
BUILD_ID := $(shell ${BUILD0} -qBuildId --out=erb 2>/dev/null)
BUILD := env MASTORAS_BUILD_ID='${BUILD_ID}' ${BUILD0}

% vagrants = []
% def phonies; @phonies ||= [] end
% def targets; @targets ||= [] end
% def t(t, mod = nil, phony = nil)
%   if mod then "#{t}_#{mod}" else t end
%     .tap { |t| targets << t }
%     .tap { |t| phonies << t if phony }
% end
% def e(str); Shellwords.shellescape(str) end
%
% def make_sumpath(dir)
%   require 'open3'
%   out, status = Open3
%     .capture2e(
%       '/usr/bin/env',
%       'bash',
%       '-c',
%       'source packer/lib/install && Sumpath "$1"',
%       '-',
%       Shellwords.escape(dir)
%     )
%   fail out unless status.success?
%   out.strip
% end
%
% @workspace
% .scroll_repo
% .each_child
% .map(&:basename)
% .map(&:to_s)
% .map(&@workspace.method(:scroll))
% .each do |scroll|
%   vagrant = @workspace.builders['Vagrant'].new(scroll)
%   return unless vagrant.handle?(scroll: scroll)
%   artifact = vagrant.artifact(opts)
%
%   working_dir = vagrant.output_dir
%
%   packer_json = scroll.packer_json
%   source_json = vagrant.source_json
%   metadata_json = vagrant.metadata_json
%
%   packer_yaml = scroll.packer_yaml
%   source_erb = vagrant.source_erb
%   metadata_erb = vagrant.metadata_erb
%
%   setup_d_sumpath = make_sumpath(scroll.setup_d_path)
%   lib_sumpath = make_sumpath(scroll.lib_path)
%   lib_path = working_dir / scroll.lib_path.basename
%
%   vagrants << vagrant
%
%   phonies.concat [scroll.name.to_s, "#{scroll.name}_setup"]
%
<%= t scroll.name %>: <%= scroll.name %>_setup <%= artifact %>
<%= t scroll.name, :test %>: <%= artifact %>_test
<%= t artifact %>: \
	<%= packer_json %> \
	<%= source_json %> \
	<%= metadata_json %> \
	<%= setup_d_sumpath %> \
	<%= lib_sumpath %>
	cd <%= working_dir %> && packer build -except test <%= packer_json.basename %>
<%= t artifact, :test %>: <%= scroll.name %>_setup
	cd <%= working_dir %> && packer build -only test <%= packer_json.basename %>
<%= t scroll.name, :setup %>:
	@rm -rf <%= lib_path %>
	@mkdir -pv <%= lib_path.dirname %>
	@cp -rv <%= scroll.lib_path %> <%= lib_path %> | sed -e 's/^/[I] /'
% scroll.resources.each do |rc|
%   target = working_dir / rc.basename
	@mkdir -pv <%= target.dirname %>
	@bash -c ' \
	  source packer/lib/install && \
	  Setup "$$@" \
	' - <%= rc %> <%= target %>.txz
% end

% [
%   [packer_json, packer_yaml, :Packer, 'packer.json'],
%   [source_json, source_erb, :Source, 'source.json'],
%   [metadata_json, metadata_erb, :Metadata, 'metadata.json'],
% ].each do |target, source, query, tag|
<%= t target %>: <%= source %>
	if [ ! -d <%= target.dirname %> ]; then mkdir -pv <%= target.dirname %>; fi
	${BUILD} -q<%= query %> --scroll=<%= scroll.name %> --out=json 2>/dev/null \
	| tee <%= target %> \
	| exec/tag <%= tag %> green | exec/tag <%= scroll.name %> blue
% end
% end # foreach scroll

#
# Dependencies
#

% {
%   'chefws' => 'ubuntu-18.04',
%   'chef_server' => 'chefws',
% }
% .each do |depends, on|
<%= depends %>: <%= on %>
% end

#
# High class targets
#

<%= t :all, nil, true %>: \
% vagrants.each do |vagrant|
	<%= vagrant.scroll.name %> \
% end

<%= t :test, nil, true %>: \
% vagrants.each do |vagrant|
	<%= vagrant.scroll.name %>_test \
%end

<%= t :setup, nil, true %>: \
% vagrants.each do |vagrant|
	<%= vagrant.scroll.name %>_setup \
% end

<%= t :clean, nil, true %>:
	rm -rf <%= @workspace.artifact_repo %>

Makefile: GNUmakefile.erb \
% vagrants.each do |vagrant|
	<%= vagrant.scroll.packer_yaml %> \
% end

	cat GNUmakefile.erb | \
	${BUILD} --in=erb --out=erb -aRecode | \
	tee Makefile 

<%= t :blast, nil, true %>:
	./cache vagrant box list --machine-readable   \
	| ruby ./blast                                \
	| bash -x                                     \
	;

<%= t :add_boxes, nil, true %>:
% vagrants.each do |vagrant|
	vagrant box add <%= vagrant.metadata_json %>
% end


<%= t :console, nil, true %>:
	${BUILD} -aConsole

<%= t :hello, nil, true %>:
	@echo Hello!

<%= t :gen, nil, true %>: \
% vagrants.each do |vagrant|
	<%= vagrant.scroll.packer_json %> \
	<%= vagrant.source_json %> \
	<%= vagrant.metadata_json %> \
% end

<%= t :add_keys, nil, true %>:
	./cache vagrant ssh-config    \
	| ruby ./add_keys             \
	| xargs -0 ssh-add            \
	;

<%= t :regen, nil, true %>: clean gen

<%= t :'.PHONY', nil, true %>: all clean blast console help gen regen hello test <%= phonies.map(&:to_s).join(' ') %>

<%= t :phonies, nil, true %>:
% phonies.each do |target|
	@echo \* <%= target %>
% end

<%= t :help, nil, true %>:
% targets.each do |target|
	@echo \* <%= target %>
% end
