BUILDER := <%= $0 %> --root=<%= @workspace.root %>
% targets = []
%
% @workspace
% .scroll_repo
% .each_child
% .map(&:basename)
% .map(&:to_s)
% .map(&@workspace.method(:scroll))
% .each do |scroll|
%   vagrant = @workspace.builders['Vagrant'].new(scroll)
%   return unless vagrant.handle?(scroll: scroll)
%   artifact = vagrant.artifact(opts)
%
%   packer_json = scroll.workbench_dir / 'packer.json'
%   source_json = scroll.workbench_dir / vagrant.source_path
%   metadata_json = scroll.workbench_dir / 'metadata.json'
%
%   packer_yaml = scroll.root / 'packer.yaml'
%   source_erb = scroll.root / 'source.yaml.erb'
%   metadata_erb = scroll.root / 'metadata.yaml.erb'
%
%   targets << vagrant
%
<%= artifact %>: \
	<%= packer_json %> \
	<%= source_json %> \
	<%= metadata_json %> \

% if scroll.lib?
	cp -av <%= scroll.lib_path %> <%= scroll.workbench_dir %>
% end
	cd <%= packer_json.dirname %> && packer build <%=
    packer_json.relative_path_from(packer_json.dirname) %>
<%= packer_json %>: <%= packer_yaml %>
	[ ! -d <%= packer_json.dirname %> ] && mkdir -pv <%= packer_json.dirname %>
	cat <%= packer_yaml %> | \
	${BUILDER} --in=yaml --out=json -aRecode 2>/dev/null | \
	tee <%= packer_json %> >/dev/null

<%= source_json %>: <%= source_erb %>
	[ ! -d <%= source_json.dirname %> ] && mkdir -pv <%= source_json.dirname %>
	cat <%= source_erb %> \
	| ${BUILDER} --in=erb --out=erb -aRecode <%= '2>/dev/null' %> \
	| ${BUILDER} --in=yaml --out=json -aRecode <%= '2>/dev/null' %> \
	| tee <%= source_json %> <%= '>/dev/null' %>

<%= metadata_json %>: <%= metadata_erb %>
	cat <%= metadata_erb %> \
	| ${BUILDER} --in=erb --out=erb -aRecode <%= '2>/dev/null' %> \
	| ${BUILDER} --in=yaml --out=json -aRecode <%= '2>/dev/null' %> \
	| tee <%= metadata_json %> <%= '>/dev/null' %>
% end

all: \
% targets.each do |vagrant|
	<%= vagrant.artifact(nil) %> \
% end

clean:
	rm -rf <%= @workspace.artifact_repo %> <%= @workspace.workbench %>

blast:
% targets.each do |vagrant|
	vagrant box remove <%= vagrant.source_path %>
% end
