BUILD := <%= $0 %> --root=<%= @workspace.root %>
% targets = []
%
% @workspace
% .scroll_repo
% .each_child
% .map(&:basename)
% .map(&:to_s)
% .map(&@workspace.method(:scroll))
% .each do |scroll|
%   vagrant = @workspace.builders['Vagrant'].new(scroll)
%   return unless vagrant.handle?(scroll: scroll)
%   artifact = vagrant.artifact(opts)
%
%   packer_json = scroll.packer_json
%   source_json = vagrant.source_json
%   metadata_json = vagrant.metadata_json
%
%   packer_yaml = scroll.packer_yaml
%   source_erb = vagrant.source_erb
%   metadata_erb = vagrant.metadata_erb
%
%   targets << vagrant
%
<%= artifact %>: \
	<%= packer_json %> \
	<%= source_json %> \
	<%= metadata_json %>
% if scroll.lib?
	cp -av <%= scroll.lib_path %> <%= scroll.artifact_dir %>
% end
	cd <%= packer_json.dirname %> && packer build <%= packer_json.basename %>

<%= packer_json %>: <%= packer_yaml %>
	if [ ! -d <%= packer_json.dirname %> ]; then mkdir -pv <%= packer_json.dirname %>; fi
	${BUILD} -qPacker --scroll=<%= scroll.name %> --out=json 2>/dev/null \
	| tee <%= packer_json %> \
	| sed -r -e 's/^/[packer.json]/'

<%= source_json %>: <%= source_erb %>
	if [ ! -d <%= source_json.dirname %> ]; then mkdir -pv <%= source_json.dirname %>; fi
	${BUILD} -qSource --scroll=<%= scroll.name %> --out=json 2>/dev/null \
	| tee <%= source_json %> \
	| sed -r -e 's/^/[source.json]/'

<%= metadata_json %>: <%= metadata_erb %>
	if [ ! -d <%= metadata_json.dirname %> ]; then mkdir -pv <%= metadata_json.dirname %>; fi
	${BUILD} -qMetadata --scroll=<%= scroll.name %> --out=json 2>/dev/null \
	| tee <%= metadata_json %> \
	| sed -r -e 's/^/[metadata.json]/'
% end

all: \
% targets.each do |vagrant|
	<%= vagrant.artifact(nil) %> \
% end

clean:
	rm -rf <%= @workspace.artifact_repo %>

Makefile: GNUmakefile.erb \
% targets.each do |vagrant|
	<%= vagrant.scroll.packer_yaml %> \
% end

	cat GNUmakefile.erb | \
	${BUILD} --in=erb --out=erb -aRecode | \
	tee Makefile 

blast:
% targets.each do |vagrant|
	vagrant box remove <%= vagrant.source_path %>
% end

% targets.each do |vagrant|
<%= vagrant.scroll.name %>: <%= vagrant.artifact(opts) %>
% end

.PHONY: all clean blast <%= targets.map { |v| v.artifact(opts) }.map(&:to_s).join(' ') %> help

help:
	@echo \* all
	@echo \* clean
	@echo \* blast
% targets.each do |vagrant|
	@echo \* <%= vagrant.scroll.name %>
% end
